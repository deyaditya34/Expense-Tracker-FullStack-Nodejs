[
  {
    "fileName": "build-api-handler.js",
    "content": "function buildApiHandler(handlers = []) {\r\n  return handlers.map((handlerFn) => wrapErrorHandling(handlerFn));\r\n}\r\n\r\nconst wrapErrorHandling = (apiHandler) => async (req, res, next) => {\r\n  try {\r\n    await apiHandler(req, res, next);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\nmodule.exports = buildApiHandler;\r\n\r\n"
  },
  {
    "fileName": "error-handler.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nfunction errorHandler (err, req, res, next) {\r\n    console.log(\"[api error]:\", err);\r\n\r\n    res.status(getErrorCode(err)).json({\r\n        success: false,\r\n        error: getErrorMessage(err)\r\n    })\r\n}\r\n\r\nfunction getErrorCode(err) {\r\n    return err.statusCode || httpError.InternalServerError().statusCode;\r\n}\r\n\r\nfunction getErrorMessage(err) {\r\n    return err.message || httpError.InternalServerError().message;\r\n}\r\n\r\n\r\nmodule.exports = errorHandler;"
  },
  {
    "fileName": "not-found-handler.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nfunction notFoundHandler(req, res, next) {\r\n    next(httpError.NotFound(\"Resource not found\"));\r\n}\r\n\r\nmodule.exports = notFoundHandler;"
  },
  {
    "fileName": "auth.api.router.js",
    "content": "\r\nconst express = require(\"express\");\r\n\r\nconst loginUser = require(\"./auth.login.api\");\r\nconst registerUser = require(\"./auth.register.api\");\r\nconst queryUsers = require(\"./query-users.api\");\r\nconst changePassword = require(\"./password.change.api\")\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/login\", loginUser);\r\nrouter.post(\"/register\", registerUser);\r\nrouter.get(\"/\", queryUsers);\r\nrouter.post(\"/changePassword\", changePassword);\r\n\r\nmodule.exports = router;"
  },
  {
    "fileName": "auth.login.api.js",
    "content": "const authService = require(\"./auth.service\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\nconst {validateUsername} = require(\"./auth.utils\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\n\r\nasync function controller(req, res) {\r\n  const { username, password } = req.body;\r\n\r\n  const token = await authService.login(username, password);\r\n\r\n  res.json({\r\n    success: true,\r\n    data: {\r\n      username,\r\n      token,\r\n    },\r\n  });\r\n}\r\n\r\nconst usernameValidator = validateUsername;\r\n\r\nconst missingParamsValidator = paramsValidator.createParamValidator(\r\n  [\"username\", \"password\"],\r\n  paramsValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  missingParamsValidator,\r\n  usernameValidator,\r\n  controller\r\n]);\r\n\r\nconsole.log(\"Aditya\")"
  },
  {
    "fileName": "auth.register.api.js",
    "content": "const authService = require(\"./auth.service\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst checkAdminRights = require(\"../middlewares/check-admin-rights\");\r\nconst {validateUsername} = require(\"./auth.utils\");\r\n\r\nasync function controller(req, res) {\r\n  const { username, password } = req.body;\r\n\r\n  await authService.register(username, password);\r\n\r\n  res.json({\r\n    success: true,\r\n    data: username,\r\n  });\r\n}\r\n\r\n\r\n\r\nconst missingParamsValidator = paramsValidator.createParamValidator(\r\n  [\"username\", \"password\"],\r\n  paramsValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  checkAdminRights,\r\n  missingParamsValidator,\r\n  validateUsername,\r\n  controller\r\n]);\r\n"
  },
  {
    "fileName": "auth.service.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst database = require(\"../services/database.service\");\r\nconst jwtService = require(\"../services/jwt.service\");\r\nconst { COLLECTION_NAMES } = require(\"../config\");\r\nconst { buildUser, encryptPassword } = require(\"./auth.utils\");\r\n\r\nasync function register(username, password) {\r\n  const existingUser = await database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .findOne({\r\n      username,\r\n    });\r\n\r\n  if (existingUser) {\r\n    throw new httpError.UnprocessableEntity(\r\n      `Username '${username}' is already taken`\r\n    );\r\n  }\r\n\r\n  const userDetails = buildUser(username, password);\r\n  console.log(\"userDetails\", userDetails);\r\n  await database.getCollection(COLLECTION_NAMES.USERS).insertOne(userDetails);\r\n}\r\n\r\nasync function login(username, password) {\r\n  const user = await database.getCollection(COLLECTION_NAMES.USERS).findOne({\r\n    username,\r\n    password: encryptPassword(password),\r\n  });\r\n\r\n  if (!user) {\r\n    throw new httpError.Unauthorized(\"Username/Password combo incorrect\");\r\n  }\r\n\r\n  const token = jwtService.createToken({ username });\r\n\r\n  return token;\r\n}\r\n\r\nasync function getUserFromToken(token) {\r\n  const payload = jwtService.decodeToken(token);\r\n\r\n  if (!payload) {\r\n    return null;\r\n  }\r\n\r\n  const username = payload.username;\r\n  const user = await database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .findOne({ username }, { projection: { _id: false, password: false } });\r\n\r\n  return user;\r\n}\r\n\r\nasync function findUsers(criteria) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .find(criteria)\r\n    .toArray();\r\n}\r\n\r\nasync function changePassword(username, password, newPassword) {\r\n  const user = await database.getCollection(COLLECTION_NAMES.USERS).findOne({\r\n    username,\r\n    password: encryptPassword(password),\r\n  });\r\n\r\n  if (!user) {\r\n    throw new httpError.Unauthorized(\"Username/Password combo incorrect\");\r\n  }\r\n\r\n  let updatedUser = buildUser(username, newPassword);\r\n\r\n  await database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .updateOne({ username }, { $set: { password: updatedUser.password } });\r\n\r\n  const token = jwtService.createToken({ username });\r\n\r\n  return token;\r\n}\r\n\r\nasync function retrieveUserDetails(username) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .findOne({ username: username });\r\n}\r\n\r\nasync function updatePassword(userDetails, username, password, newPassword) {\r\n  if (userDetails.username !== username) {\r\n    throw new httpError.Unauthorized(\r\n      \"Username provided does not match with the username stored in the database.\"\r\n    );\r\n  }\r\n\r\n  if (userDetails.password !== encryptPassword(password)) {\r\n    throw new httpError.Unauthorized(\r\n      \"Password doesnot match with the user Password saved in the database.\"\r\n    );\r\n  }\r\n\r\n  await database\r\n    .getCollection(COLLECTION_NAMES.USERS)\r\n    .updateOne(\r\n      { username: userDetails.username },\r\n      { $set: { password: encryptPassword(newPassword) } }\r\n    );\r\n}\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  getUserFromToken,\r\n  findUsers,\r\n  changePassword,\r\n  retrieveUserDetails,\r\n  updatePassword,\r\n};\r\n"
  },
  {
    "fileName": "auth.utils.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst {scryptSync} = require(\"crypto\");\r\nconst {PASSWORD_SALT} = require(\"../config\")\r\n\r\nfunction validateUsername(req, res, next) {\r\n  const { username, password } = req.body;\r\n\r\n  if (typeof username !== \"string\" || typeof password !== \"string\") {\r\n    throw new httpError.BadRequest(\"Username and Password should be text only\");\r\n  }\r\n\r\n  if (username.length < 8) {\r\n    throw new httpError.BadRequest(\"Username must be atleast 8 characters\");\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nfunction buildUser(username, password) {\r\n  return {\r\n    username: username,\r\n    password: encryptPassword(password),\r\n    role: \"user\"}\r\n}\r\n\r\nfunction encryptPassword(password) {\r\n  return scryptSync(password, PASSWORD_SALT, 64).toString(\"hex\");\r\n}\r\n\r\nmodule.exports = {validateUsername, buildUser, encryptPassword};"
  },
  {
    "fileName": "password.change.api.js",
    "content": "const authService = require(\"./auth.service\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\nconst { validateUsername } = require(\"./auth.utils\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\n\r\nasync function controller(req, res) {\r\n  const { user, username, password, newPassword } = req.body;\r\n\r\n  const userDetails = await authService.retrieveUserDetails(user.username);\r\n  console.log(\"user -\", userDetails);\r\n\r\n  await authService.updatePassword(\r\n    userDetails,\r\n    username,\r\n    password,\r\n    newPassword\r\n  );\r\n\r\n  res.json({\r\n    message: \"Password Changed Successfully\",\r\n  });\r\n}\r\n\r\nconst usernameValidator = validateUsername;\r\n\r\nconst missingParamsValidator = paramsValidator.createParamValidator(\r\n  [\"username\", \"password\", \"newPassword\"],\r\n  paramsValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  missingParamsValidator,\r\n  usernameValidator,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "query-users.api.js",
    "content": "const { findUsers } = require(\"./auth.service\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst checkAdminRights = require(\"../middlewares/check-admin-rights\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\n\r\nasync function controller(req, res) {\r\n  const { query } = req.body;\r\n  console.log(\"parsedQuery\", query);\r\n\r\n  const result = await findUsers({ ...query, role: { $ne: \"ADMIN\" } });\r\n\r\n  if (result.length === 0) {\r\n    res.json({\r\n      message: \"No User Found\",\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Users Found\",\r\n      data: result,\r\n    });\r\n  }\r\n}\r\n\r\nfunction validateParams(req, res, next) {\r\n  const { username } = req.body.query;\r\n\r\n  let parsedQuery = {};\r\n\r\n  if (typeof username === \"string\") {\r\n    parsedQuery.username = { $regex: username };\r\n  }\r\n\r\n  Reflect.set(req.body, \"query\", parsedQuery);\r\n  next();\r\n}\r\n\r\nconst missingParamsValidator = paramsValidator.createParamValidator(\r\n  [\"query\"],\r\n  paramsValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  checkAdminRights,\r\n  missingParamsValidator,\r\n  validateParams,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "business.api.router.js",
    "content": "const express = require(\"express\");\r\n\r\nconst getBusiness = require(\"./get-business.api\");\r\n\r\nconst router = express.Router();\r\n\r\n\r\nrouter.get(\"/\", getBusiness);\r\n\r\n\r\n\r\nmodule.exports = router;"
  },
  {
    "fileName": "business.service.js",
    "content": "const database = require(\"../services/database.service\");\r\nconst { COLLECTION_NAMES, EVENT_NAMES } = require(\"../config\");\r\nconst eventBridge = require(\"../events/event.service\");\r\n\r\nfunction getBusiness() {\r\n  return database.getCollection(COLLECTION_NAMES.BUSINESS).find({}).toArray();\r\n}\r\n\r\nasync function registerTransaction(type, amount) {\r\n  let incBy = amount;\r\n  if (type === \"DEBIT\") {\r\n    incBy = -amount;\r\n  }\r\n  await database\r\n    .getCollection(COLLECTION_NAMES.BUSINESS)\r\n    .updateOne({}, { $inc: { balance: incBy } });\r\n\r\n  return database.getCollection(COLLECTION_NAMES.BUSINESS).findOne({});\r\n}\r\n\r\neventBridge.addListener(EVENT_NAMES.TRANSACTION_CREATED, registerTransaction);\r\n\r\nmodule.exports = { getBusiness, registerTransaction };\r\n"
  },
  {
    "fileName": "get-business.api.js",
    "content": "\r\nconst getBusiness = require(\"./business.service\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\n\r\n\r\n\r\nasync function controller(req, res) {\r\n  let result = await getBusiness();\r\n\r\n  res.json({\r\n    message: `Details about the business`,\r\n    data: result, \r\n  })\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, controller]);"
  },
  {
    "fileName": "categories.api.router.js",
    "content": "const express = require(\"express\");\r\n\r\nconst getCategory = require(\"./get-category.api\");\r\nconst createCategory = require(\"./create-category.api\");\r\nconst deleteCategory = require(\"./delete-category.api\");\r\nconst searchCatergory = require(\"./search-category.api\");\r\nconst getCategoryWithTransactions = require(\"./get-category-transactions-api\")\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/\", createCategory);\r\nrouter.delete(\"/:id\", deleteCategory);\r\nrouter.get(\"/\", searchCatergory);\r\nrouter.get(\"/:id\", getCategory);\r\nrouter.get(\"/:id/transactions\", getCategoryWithTransactions)\r\n\r\nmodule.exports = router;\r\n"
  },
  {
    "fileName": "categories.service.js",
    "content": "const database = require(\"../services/database.service\");\r\nconst { COLLECTION_NAMES } = require(\"../config\");\r\nconst { ObjectId } = require(\"mongodb\");\r\n\r\nfunction createCategory(categoryDetails) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .insertOne(categoryDetails);\r\n}\r\n\r\nfunction getAllCategories(pageNo, pageSize) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .find({})\r\n    .skip((pageNo - 1) * pageSize)\r\n    .limit(pageSize)\r\n    .toArray();\r\n}\r\n\r\nfunction searchCategory(searchCategory, pageNo, pageSize) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .find(searchCategory)\r\n    .skip((pageNo - 1) * pageSize)\r\n    .limit(pageSize)\r\n    .toArray();\r\n}\r\n\r\nfunction getCategoryByName(categoryName) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .findOne(categoryName);\r\n}\r\n\r\nfunction getCategory(id) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .findOne({ _id: new ObjectId(id) })\r\n}\r\n\r\nfunction deleteCategory(id) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.CATEGORIES)\r\n    .deleteOne({ _id: { $in: [new ObjectId(id)] } });\r\n}\r\n\r\nfunction getCategoryTransactions(id, pageNo, pageSize) {\r\n  return database.getCollection(COLLECTION_NAMES.TRANSACTIONS).find({});\r\n}\r\n\r\nmodule.exports = {\r\n  createCategory,\r\n  getAllCategories,\r\n  searchCategory,\r\n  getCategory,\r\n  deleteCategory,\r\n  getCategoryByName, \r\n};\r\n"
  },
  {
    "fileName": "create-category.api.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { createCategory, getCategoryByName } = require(\"./categories.service\");\r\nconst checkAdminRights = require(\"../middlewares/check-admin-rights\");\r\n\r\n\r\nasync function controller(req, res) {\r\n  let { color, name, type } = req.body;\r\n\r\n  const result = await createCategory({ color, name, type });\r\n\r\n  res.json({\r\n    success: result.acknowledged,\r\n    data: {\r\n      catergory: {\r\n        _id: result.insertedId,\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nasync function validateParams(req, res, next) {\r\n  const errorTypedFields = [\"color\", \"name\", \"type\"].filter(\r\n    (field) => typeof Reflect.get(req.body, field) !== \"string\"\r\n  );\r\n  \r\n  if (errorTypedFields.length > 0) {\r\n    throw new httpError.BadRequest(\r\n      `Field '${errorTypedFields.join(\", \")}' should be of string type`\r\n    );\r\n  }\r\n\r\n  let {type, name } = req.body;\r\n\r\n  if (type !== \"DEBIT\" && type !== \"CREDIT\") {\r\n    throw new httpError.BadRequest(\r\n      `Field 'type' should be either 'DEBIT' or 'CREDIT'`\r\n    );\r\n  }\r\n  \r\n  const getCategory = await getCategoryByName({name});\r\n  \r\n  if (getCategory) {\r\n    throw new httpError.BadRequest(`Category '${name}' already exists.`)\r\n  } \r\n  \r\n  next();\r\n}\r\n\r\nconst missingParamsValidator = paramsValidator.createParamValidator(\r\n  [\"name\", \"color\", \"type\"],\r\n  paramsValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  checkAdminRights,\r\n  missingParamsValidator,\r\n  validateParams,\r\n  controller\r\n]);\r\n"
  },
  {
    "fileName": "delete-category.api.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst paramsValidator = require(\"../middlewares/params-validator\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { deleteCategory } = require(\"./categories.service\");\r\nconst checkAdminRights = require(\"../middlewares/check-admin-rights\");\r\n\r\nasync function controller(req, res) {\r\n  const { id } = req.params;\r\n\r\n  const result = await deleteCategory(id);\r\n\r\n  if (!result) {\r\n    res.json({\r\n      message: \"No category available to delete\",\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Category Deleted\",\r\n      data: result.deletedCount,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, checkAdminRights, controller]);\r\n"
  },
  {
    "fileName": "get-all-catergories.api.js",
    "content": "const buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst {getAllCategories} = require(\"./categories.service\");\r\nconst pagination = require(\"../middlewares/pagination\");\r\n\r\nasync function controller(req, res) {\r\n  let {pageNo, pageSize} = req.query;\r\n\r\n  let result = await getAllCategories(pageNo, pageSize);\r\n  console.log(result);\r\n  if (!result) {\r\n    res.json({\r\n      message: \"No categories stored in the application to display\"\r\n    })\r\n  } else {\r\n    res.json({\r\n      message: \"Displayed categories below\",\r\n      data: result,\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, pagination, controller]);"
  },
  {
    "fileName": "get-category-transactions-api.js",
    "content": "const pagination = require(\"../middlewares/pagination\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst { searchTransaction } = require(\"../transactions/transactions.service\");\r\nconst { getCategory } = require(\"../categories/categories.service\");\r\nconst { ObjectId } = require(\"mongodb\");\r\n\r\nasync function controller(req, res) {\r\n  const { id } = req.params;\r\n  const { pageNo, pageSize } = req.query;\r\n  const { user} = req.body;\r\n\r\n  const resultFromGetCategory = await getCategory(id);\r\n\r\n  if (!resultFromGetCategory) {\r\n    res.json({\r\n      message: \"No category found for the id\",\r\n    });\r\n  }\r\n\r\n  const resultFromSearchTransaction = await searchTransaction(\r\n    { \"category._id\": new ObjectId(id) },\r\n    user.username,\r\n    pageNo,\r\n    pageSize\r\n  );\r\n\r\n  if (resultFromSearchTransaction.length === 0) {\r\n    res.json({\r\n      message: `No transactions stored in the category Id '${id}'`,\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: `Transactions for the category Id '${id}'`,\r\n      data: resultFromSearchTransaction,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, pagination, controller]);\r\n"
  },
  {
    "fileName": "get-category.api.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nconst { getCategory } = require(\"./categories.service\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\n\r\nasync function controller(req, res) {\r\n  const {id}  = req.params;\r\n  const result = await getCategory(id);\r\n\r\n  if (!result) {\r\n    res.json({\r\n      message: \"No category found for the id\",\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Category Found\",\r\n      data: result,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "search-category.api.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { searchCategory } = require(\"./categories.service\");\r\nconst pagination = require(\"../middlewares/pagination\");\r\n\r\nasync function controller(req, res) {\r\n  const { name, color, type, pageNo, pageSize } = req.query;\r\n\r\n  let searchCategoryParams = {};\r\n  if (name) {\r\n    searchCategoryParams.name = name;\r\n  }\r\n  if (color) {\r\n    searchCategoryParams.color = color;\r\n  }\r\n  if (type) {\r\n    searchCategoryParams.type = type;\r\n  }\r\n\r\n  const result = await searchCategory(searchCategoryParams, pageNo, pageSize);\r\n\r\n  res.json({\r\n    message: \"Categories found\",\r\n    data: result,\r\n  });\r\n}\r\n\r\nfunction validateParams(req, res, next) {\r\n  let { name, color, type } = req.query;\r\n\r\n  if (name) {\r\n    if (typeof name !== \"string\") {\r\n      throw new httpError.BadRequest(\"Field 'name' should be of string type\");\r\n    }\r\n  }\r\n\r\n  if (color) {\r\n    if (typeof color === \"string\") {\r\n      throw new httpError.BadRequest(\"Field 'color' should be of string type\");\r\n    }\r\n  }\r\n\r\n  if (type) {\r\n    if (typeof type !== \"string\") {\r\n      throw new httpError.BadRequest(\"Field 'type' should be of string type\");\r\n    }\r\n    if (type !== \"DEBIT\" && type !== \"CREDIT\") {\r\n      throw new httpError.BadRequest(\r\n        \"Field 'type' should be either 'DEBIT' or 'CREDIT'\"\r\n      );\r\n    }\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  validateParams,\r\n  pagination,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "config.js",
    "content": "const MONGOURI = \"mongodb://127.0.0.1:27017\";\r\nconst DB_NAME = \"expense-tracker\";\r\n\r\nconst APP_PORT = 3090;\r\n\r\nconst COLLECTION_NAMES = {\r\n    USERS: \"expense-tracker-users\",\r\n    TRANSACTIONS: \"transactions\",\r\n    CATEGORIES: \"categories\",\r\n    BUSINESS: \"business\"\r\n}\r\n\r\nconst EVENT_NAMES = {\r\n    TRANSACTION_CREATED: \"transaction-created\",\r\n}\r\n\r\nconst JWT_SECRET = \"Bokakhat@123\";\r\n\r\nconst AUTH_TOKEN_HEADER_FIELD = \"token\";\r\n\r\nconst PASSWORD_SALT = \"Bokakhat@123\";\r\n\r\nmodule.exports = {\r\n    MONGOURI,\r\n    DB_NAME,\r\n    APP_PORT,\r\n    COLLECTION_NAMES,\r\n    EVENT_NAMES,\r\n    JWT_SECRET,\r\n    AUTH_TOKEN_HEADER_FIELD,\r\n    PASSWORD_SALT\r\n}"
  },
  {
    "fileName": "event.service.js",
    "content": "const { EventEmitter } = require(\"events\");\r\n\r\n\r\nconst eventBridge = new EventEmitter();\r\n\r\nmodule.exports = eventBridge;\r\n"
  },
  {
    "fileName": "index.js",
    "content": "const express = require(\"express\");\r\nconst config = require(\"./config\");\r\n\r\nconst database = require(\"./services/database.service\");\r\nconst authRouter = require(\"./auth/auth.api.router\");\r\nconst transactionRouter = require(\"./transactions/transactions.api.router\");\r\nconst categoryRouter = require(\"./categories/categories.api.router\");\r\n\r\nconst businessRouter = require(\"./business/business.api.router\");\r\nconst requestLogger = require(\"./middlewares/request-logger\");\r\nconst errrorHandler = require(\"./api-utils/error-handler\");\r\nconst notFoundHandler = require(\"./api-utils/not-found-handler\");\r\n\r\nasync function start() {\r\n  console.log(\"[Init]: Connecting to database\");\r\n  await database.initialize();\r\n\r\n  console.log(\"[Init]: starting server\");\r\n\r\n  const server = new express();\r\n  server.use(express.json());\r\n  server.use(requestLogger);\r\n\r\n  server.use(\"/transactions\", transactionRouter);\r\n  server.use(\"/auth\", authRouter);\r\n\r\n  server.use(\"/categories\", categoryRouter);\r\n  server.use(\"/business\", businessRouter);\r\n  server.use(notFoundHandler);\r\n  server.use(errrorHandler);\r\n\r\n  server.listen(config.APP_PORT, () => {\r\n    console.log(\r\n      \"[init]: expense-tracker application running on\",\r\n      config.APP_PORT\r\n    );\r\n  });\r\n}\r\n\r\nstart().catch((err) => {\r\n  console.log(\"[fatal]: could not start expense-tracker application\");\r\n  console.log(err);\r\n});\r\n"
  },
  {
    "fileName": "check-admin-rights.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nfunction checkAdminRights(req, res, next) {\r\n  const {user} = req.body;\r\n\r\n  if (!user) {\r\n    throw new httpError.Forbidden(\"No user found to check rights\")\r\n  }\r\n\r\n  if (user.role !== \"ADMIN\") {\r\n    throw new httpError.Unauthorized(\"User not authorized.\");\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = checkAdminRights;"
  },
  {
    "fileName": "pagination.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nfunction pagination(req, res, next) {\r\n  const { pageNo, pageSize } = req.query;\r\n\r\n  if (pageNo) {\r\n    let pageNumber = parseInt(pageNo);\r\n\r\n    if (Number.isNaN(pageNumber) === true) {\r\n      throw new httpError.BadRequest(\r\n        \"Invalid 'Field' - 'Page Number'. It supports only numbers.\"\r\n      );\r\n    }\r\n\r\n    if (pageNumber < 1) {\r\n      throw new httpError.BadRequest(\r\n        `Field '${pageNo}' should be greater than '0'`\r\n      );\r\n    }\r\n\r\n    Reflect.set(req.query, \"pageNo\", pageNumber);\r\n  }\r\n\r\n  if (pageSize) {\r\n    let pageSz = parseInt(pageSize);\r\n\r\n    if (Number.isNaN(pageSz) === true) {\r\n      throw new httpError.BadRequest(\r\n        \"Invalid 'Field' - 'Page Size'. It supports only numbers.\"\r\n      );\r\n    }\r\n\r\n    if (pageSz > 20) {\r\n      throw new httpError.BadRequest(\r\n        `'Field' - 'Page Size' should be lesser than or equal to '20'`\r\n      );\r\n    }\r\n\r\n    if (pageSz < 1) {\r\n      throw new httpError.BadRequest(\r\n        `'Field' - 'Page Size' should be greater than or equal to '1'`\r\n      );\r\n    }\r\n\r\n    Reflect.set(req.query, \"pageSize\", pageSz);\r\n  }\r\n\r\n  if (!pageNo) {\r\n    Reflect.set(req.query, \"pageNo\", 1);\r\n  }\r\n\r\n  if (!pageSize) {\r\n    Reflect.set(req.query, \"pageSize\", 10);\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = pagination;\r\n"
  },
  {
    "fileName": "params-validator.js",
    "content": "const httpError = require(\"http-errors\");\r\n\r\nconst createParamValidator = (params, paramsKey) => (req, res, next) => {\r\n  const reqParams = Reflect.get(req, paramsKey);\r\n  \r\n  const missingParams = params.filter(\r\n    (param) => !Reflect.has(reqParams, param)\r\n  );\r\n\r\n  if (missingParams.length > 0) {\r\n    throw httpError.BadRequest(\r\n      `Required fields '${missingParams.join(\r\n        \", \"\r\n      )}' are missing from '${paramsKey}'`\r\n    );\r\n  }\r\n\r\n  next();\r\n};\r\n\r\nconst PARAM_KEY = {\r\n  BODY: \"body\",\r\n  QUERY: \"query\",\r\n  PARAMS: \"params\"\r\n};\r\n\r\nmodule.exports = {\r\n  createParamValidator,\r\n  PARAM_KEY,\r\n};\r\n"
  },
  {
    "fileName": "request-logger.js",
    "content": "async function requestLogger(req, res, next) {\r\n  \r\n  const { url, method } = req;\r\n\r\n  const timestampStart = Date.now();\r\n  res.on(\"close\", () => {\r\n    /**\r\n     * This event is fired by Express when response finishes\r\n     */\r\n    const timestampEnd = Date.now();\r\n    const responseTime = timestampEnd - timestampStart;\r\n\r\n    console.log(`[api]: ${method} ${url} - ${res.statusCode} - ${responseTime}ms`);\r\n  });\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = requestLogger;\r\n"
  },
  {
    "fileName": "string-checker.js",
    "content": "let req = {\r\n  headers: \"name\",\r\n  query: true,\r\n  params: 9865,\r\n};\r\nlet {headers, query, params} = req;\r\n\r\nconst stringChecker =\r\n  (arr = []) => {\r\n    const errorTypedFields = [arr].filter(\r\n      (field) => typeof Reflect.get(req, \"field\") !== \"string\"\r\n    );\r\n\r\n    console.log(errorTypedFields)\r\n  };\r\n\r\nstringChecker([\"headers\", \"query\", \"params\"]);"
  },
  {
    "fileName": "user-resolver.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst {AUTH_TOKEN_HEADER_FIELD} = require(\"../config\");\r\nconst {getUserFromToken} = require(\"../auth/auth.service\");\r\n\r\n\r\nasync function userResolver(req, res, next) {\r\n  const token = Reflect.get(req.headers, AUTH_TOKEN_HEADER_FIELD);\r\n\r\n  if(!token) {\r\n    throw new httpError.Forbidden(\"Access Denied\");\r\n  }\r\n\r\n  const user = await getUserFromToken(token);\r\n  \r\n  if(!user) {\r\n    throw new httpError.Forbidden(\"Invalid Token\");\r\n  }\r\n\r\n  Reflect.set(req.body, \"user\", user);\r\n  \r\n  next();\r\n}\r\n\r\nmodule.exports = userResolver;"
  },
  {
    "fileName": "database.service.js",
    "content": "const mongodb = require(\"mongodb\");\r\nconst config = require(\"../config\");\r\n\r\nconst client = new mongodb.MongoClient(config.MONGOURI);\r\n\r\nlet database = null;\r\n\r\nasync function initialize() {\r\n    await client.connect();\r\n    \r\n    database = client.db(config.DB_NAME);\r\n}\r\n\r\nfunction getCollection(collectionName) {\r\n    return database.collection(collectionName);\r\n}\r\n\r\nmodule.exports = {\r\n    initialize,\r\n    getCollection\r\n};\r\n\r\n"
  },
  {
    "fileName": "jwt.service.js",
    "content": "const jwt = require(\"jsonwebtoken\");\r\nconst config = require(\"../config\");\r\n\r\n\r\nfunction createToken(payload) {\r\n    const token = jwt.sign(payload, config.JWT_SECRET);\r\n\r\n    return token;\r\n}\r\n\r\nfunction decodeToken(token) {\r\n    try {\r\n        return jwt.verify(token, config.JWT_SECRET);\r\n    } catch (err) {\r\n        console.log(\"Invalid Token\", token);\r\n        return null;\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    createToken,\r\n    decodeToken\r\n}\r\n"
  },
  {
    "fileName": "create-transaction.api.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst eventBridge = require(\"../events/event.service\");\r\n\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { createTransaction } = require(\"./transactions.service\");\r\nconst paramValidator = require(\"../middlewares/params-validator\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst { getCategory } = require(\"../categories/categories.service\");\r\nconst { EVENT_NAMES } = require(\"../config\");\r\n\r\n\r\nasync function controller(req, res) {\r\n  const { type, amount, category, date, user } = req.body;\r\n\r\n  const result = await createTransaction({\r\n    type,\r\n    amount,\r\n    category,\r\n    date,\r\n    createdAt: new Date(),\r\n    createdBy: user,\r\n  });\r\n\r\n  eventBridge.emit(EVENT_NAMES.TRANSACTION_CREATED, type, amount);\r\n\r\n  res.json({\r\n    success: result.acknowledged,\r\n    data: {\r\n      transaction: {\r\n        _id: result.insertedId\r\n      },\r\n    },\r\n  });\r\n}\r\n\r\nasync function validateParams(req, res, next) {\r\n  const { type, amount, date, categoryId } = req.body;\r\n\r\n  if (typeof type === \"string\") {\r\n    if (type !== \"DEBIT\" && type !== \"CREDIT\") {\r\n      throw new httpError.BadRequest(\r\n        \"Field 'type' shoould be either 'DEBIT' or 'CREDIT'\"\r\n      );\r\n    }\r\n  } else {\r\n    throw new httpError.BadRequest(\"Field 'type' should be 'string' type only\");\r\n  }\r\n\r\n  if (typeof amount !== \"number\") {\r\n    throw new httpError.BadRequest(\r\n      \"Field 'amount' should be consisted of 'number' type\"\r\n    );\r\n  }\r\n\r\n  const transactionCategoryValidator = await getCategory(categoryId);\r\n  if (transactionCategoryValidator.length === 0) {\r\n    throw new httpError.BadRequest(\"Field 'categoryId' is invalid\");\r\n  } else {\r\n    if (transactionCategoryValidator[0].type !== type) {\r\n      throw new httpError.BadRequest(\r\n        \"'Category Type' retrieved from the 'categoryId' does not match with the requested 'type'\"\r\n      );\r\n    }\r\n    console.log(\"transactionCategoryValidator\", transactionCategoryValidator);\r\n    Reflect.set(req.body, \"category\", transactionCategoryValidator);\r\n  }\r\n\r\n  if (date) {\r\n    if (typeof date !== \"string\") {\r\n      throw new httpError.BadRequest(\"'Date' should be 'string' type\");\r\n    }\r\n\r\n    if (new Date(date).valueOf() > 0) {\r\n      next();\r\n    } else {\r\n      throw new httpError.BadRequest(\r\n        `invalid 'Date' - '${date}. 'Date' should be either in format 'year-month-day' or 'month-day-year'`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst missingParamsValidator = paramValidator.createParamValidator(\r\n  [\"type\", \"amount\", \"categoryId\", \"date\"],\r\n  paramValidator.PARAM_KEY.BODY\r\n);\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  missingParamsValidator,\r\n  validateParams,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "get-all-transactions.api.js",
    "content": "const buildApiHandler = require(\"../api-utils/build-api-handler\");\r\nconst pagination = require(\"../middlewares/pagination\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { getAllTransactions } = require(\"./transactions.service\");\r\n\r\n\r\nasync function controller(req, res) {\r\n  const { pageNo, pageSize } = req.query;\r\n  \r\n  const result = await getAllTransactions(pageNo, pageSize);\r\n\r\n  if (result.length === 0) {\r\n    res.json({\r\n      message: \"No transactions found for the user\",\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"transactions found\",\r\n      data: result,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, pagination, controller]);\r\n"
  },
  {
    "fileName": "get-transaction.api.js",
    "content": "const { getTransaction } = require(\"./transactions.service\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\n\r\nasync function controller(req, res) {\r\n  const { id } = req.params;\r\n\r\n  const result = await getTransaction(id);\r\n\r\n  if (!result) {\r\n    res.json({\r\n      message: `No transaction found for the id '${id}'`,\r\n    });\r\n  } else {\r\n    res.json({\r\n      message: \"Transaction found\",\r\n      data: result,\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = buildApiHandler([userResolver, controller]);\r\n"
  },
  {
    "fileName": "search-transaction.api.js",
    "content": "const httpError = require(\"http-errors\");\r\nconst pagination = require(\"../middlewares/pagination\");\r\nconst userResolver = require(\"../middlewares/user-resolver\");\r\nconst { searchTransaction } = require(\"./transactions.service\");\r\nconst buildApiHandler = require(\"../api-utils/build-api-handler\");\r\n\r\nasync function controller(req, res) {\r\n  const { type, amount, categoryName, pageNo, pageSize } = req.query;\r\n\r\n  let searchTransactionParams = {};\r\n\r\n  if (type) {\r\n    searchTransactionParams.type = type;\r\n  }\r\n\r\n  if (amount) {\r\n    searchTransactionParams.amount = amount;\r\n  }\r\n\r\n  if (categoryName) {\r\n    searchTransactionParams[\"category.name\"] = categoryName;\r\n  }\r\n\r\n  const result = await searchTransaction(\r\n    searchTransactionParams,\r\n    pageNo,\r\n    pageSize\r\n  );\r\n\r\n  res.json({\r\n    message: \"Transactions found\",\r\n    data: result,\r\n  });\r\n}\r\n\r\nfunction validateParams(req, res, next) {\r\n  let { type, amount, categoryName } = req.query;\r\n\r\n  if (amount) {\r\n    let amountParseInt = parseInt(amount);\r\n\r\n    if (Number.isNaN(amountParseInt) === true) {\r\n      throw new httpError.BadRequest(\r\n        \"Invalid 'Field' - 'amount'. It supports only numbers.\"\r\n      );\r\n    }\r\n    Reflect.set(req.query, \"amount\", amountParseInt);\r\n  }\r\n\r\n  if (type) {\r\n    if (type !== \"DEBIT\" && type !== \"CREDIT\") {\r\n      throw new httpError.BadRequest(\r\n        \"Field 'type' should be either 'DEBIT' or 'CREDIT'\"\r\n      );\r\n    }\r\n  }\r\n\r\n  if (categoryName) {\r\n    if (typeof categoryName !== \"string\") {\r\n      throw new httpError.BadRequest(\r\n        `Field categoryName -'${categoryName}' should be 'string' type.`\r\n      )\r\n    }\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = buildApiHandler([\r\n  userResolver,\r\n  pagination,\r\n  validateParams,\r\n  controller,\r\n]);\r\n"
  },
  {
    "fileName": "transactions.api.router.js",
    "content": "const express = require(\"express\");\r\n\r\nconst createTransaction = require(\"./create-transaction.api\");\r\nconst getTransaction = require(\"./get-transaction.api\");\r\nconst searchTransaction = require(\"./search-transaction.api\");\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/\", createTransaction);\r\nrouter.get(\"/:id\", getTransaction);\r\nrouter.get(\"/\", searchTransaction);\r\n\r\nmodule.exports = router;\r\n"
  },
  {
    "fileName": "transactions.service.js",
    "content": "// get transaction\r\n// list transactions\r\n// create transaction\r\nconst database = require(\"../services/database.service\");\r\nconst { COLLECTION_NAMES } = require(\"../config\");\r\nconst { ObjectId } = require(\"mongodb\");\r\n\r\nlet transaction = {\r\n  type: \"DEBIT\",\r\n  amount: 550,\r\n  category: {\r\n    _id: \"64b911e8e02c43d67aa5e7a8\",\r\n  },\r\n  date: \"2023-07-20T16:01:37.204Z\",\r\n};\r\n\r\nfunction createTransaction(transactionDetails) {\r\n  console.log(\"transactionDetails\", transactionDetails);\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.TRANSACTIONS)\r\n    .insertOne(transactionDetails);\r\n}\r\n\r\nfunction getAllTransactions(pageNo, pageSize) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.TRANSACTIONS)\r\n    .find({})\r\n    .skip((pageNo - 1) * pageSize)\r\n    .limit(pageSize)\r\n    .toArray();\r\n}\r\n\r\nfunction getTransaction(transactionId) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.TRANSACTIONS)\r\n    .findOne({ _id: new ObjectId(transactionId) });\r\n}\r\n\r\nfunction searchTransaction(transactionDetails, username, pageNo, pageSize) {\r\n  return database\r\n    .getCollection(COLLECTION_NAMES.TRANSACTIONS)\r\n    .find(transactionDetails, { username: { $eq: username } })\r\n    .skip((pageNo - 1) * pageSize)\r\n    .limit(pageSize)\r\n    .toArray();\r\n}\r\n\r\nmodule.exports = {\r\n  createTransaction,\r\n  getAllTransactions,\r\n  getTransaction,\r\n  searchTransaction,\r\n};\r\n"
  }
]